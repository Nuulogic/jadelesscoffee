#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    program = require('commander'),
    jadelesscoffee = require('jadelesscoffee');

var options = {};

program
  .version(jadelesscoffee.version)
  .usage('sourcedir')
  .option('-O, --out <dir>', 'output the compiled files to <dir>')
  .option('-w, --watch', 'watch the source directory and output to the destination directory on file changes')
  .option('-i, --incremental', 'Saves a .jlc file in the source directory and uses it to do incremental compiling -- only compiling the files that have changed')
  .option('-q, --quiet', 'No output in compile mode. This option is not available with --watch')
  .option('-m, --html', 'Output html error pages instead of console errors')
  .option('-n, --maps', 'Generate source maps. Line numbers for Less, v3 maps for CoffeeScript.')
  .option('-u, --ugly', 'Turn off pretty printed results')
  .option('-V, --verbose', 'Opposite of --quiet. Say everything. A lot.')

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    # compile to output');
  console.log('    $ jlc -O ./build ./src');
  console.log('');
  console.log('    # watch and compile output');
  console.log('    $ jlc --watch -O ./build ./src');
  console.log('');
});

options = program.parse(process.argv);

var sourceDirectory = (program.args.length > 0) ? program.args[0] : null;

if (!options.out) {
    throw "--out <dir> is required. Compiled files must have an output directory.";
}

if (!sourceDirectory) {
    throw "<sourcedir> is required. Source files are required to output compiled files.";
}

sourceDirectory = path.resolve(sourceDirectory);
outputDirectory = path.resolve(options.out);

if (options.watch) {
    var watcher = new jadelesscoffee.Watcher(sourceDirectory, outputDirectory, (options.incremental != undefined));
} else {
    jadelesscoffee.Compiler.silent = options.quiet;
    jadelesscoffee.Compiler.verbose = options.verbose;
    jadelesscoffee.Compiler.htmlErrors = options.html;
    jadelesscoffee.Compiler.maps = options.maps || true;
    jadelesscoffee.Compiler.ugly = options.ugly || false;


    var compiler = new jadelesscoffee.Compiler(sourceDirectory, outputDirectory, (options.incremental != undefined), options);
    try {
        compiler.compile(sourceDirectory);
    }
    catch (error) {
        if (!jadelesscoffee.Compiler.silent) {
            console.log(error);
        }
    }
    if (!jadelesscoffee.Compiler.silent)
        console.log("Compiled " + compiler.compileCount + ' files and output to ' + outputDirectory);
}